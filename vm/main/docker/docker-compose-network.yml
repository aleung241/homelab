services:
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - /opt/docker/nginx/etc/nginx:/etc/nginx
      - /opt/docker/nginx/etc/nginx-index:/opt/index
      - /opt/docker/nginx/etc/nginx-access:/etc/apache2
      - /opt/docker/letsencrypt/etc/letsencrypt:/letsencrypt
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "87:80"
      - "447:443"
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/nginx
        awslogs-create-group: "true"
    restart: unless-stopped

#  unifi:
#    image: linuxserver/unifi-controller
#    container_name: unifi
#    env_file:
#      - .env
#    environment:
#      PUID: ${DEFAULT_USER}
#      PGID: ${DEFAULT_GROUP}
#    volumes:
#      - /opt/docker/unifi:/config
#    ports:
#      - "3478:3478/udp"
#      - "10001:10001/udp"
#      - "8080:8080"
#      - "8443:8443"
#      - "6789:6789"
#    labels:
#      - "org.hotio.pullio.notify=true"
#      - "org.hotio.pullio.update=true"
#      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
#    logging:
#      driver: awslogs
#      options:
#        awslogs-region: ${AWS_DEFAULT_REGION}
#        awslogs-group: /${DEFAULT_BASE_MACHINE}/unifi-controller
#        awslogs-create-group: "true"
#    restart: unless-stopped

  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi-network-application
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      TZ: ${TIMEZONE}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASSWORD}
      MONGO_HOST: unifi-db
      MONGO_PORT: 27017
      MONGO_DBNAME: unifi
      MONGO_AUTHSOURCE: admin
    volumes:
      - /opt/docker/unifi-network-application/data:/config
    ports:
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "8080:8080"
      - "8443:8443"
      - "6789:6789"
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/unifi-network-application
        awslogs-create-group: "true"
    restart: unless-stopped

  unifi-db:
    image: docker.io/mongo:8.0.12
    container_name: unifi-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASSWORD}
      MONGO_DBNAME: unifi
      MONGO_AUTHSOURCE: admin
    volumes:
      - /opt/docker/unifi-network-application/mongo/data:/data/db
      - /opt/docker/unifi-network-application/mongo/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/unifi-db
        awslogs-create-group: "true"
    restart: unless-stopped

  adguard-home:
    image: adguard/adguardhome
    container_name: adguard-home
    env_file:
      - .env
    ports:
      - "53:53/tcp"     # dns
      - "53:53/udp"     # dns
      - "8000:80"       # http
      - "8001:443/tcp"  # dns-over-https
      - "8001:443/udp"  # dns-over-https
      - "8002:3000"     # web
    volumes:
      - /opt/docker/adguardhome/work:/opt/adguardhome/work
      - /opt/docker/adguardhome/conf:/opt/adguardhome/conf
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/adguard-home
        awslogs-create-group: "true"
    restart: unless-stopped

  wireguard-client:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard-client
    cap_add:
      - NET_ADMIN
      - SYS_MODULE #optional
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      TZ: ${TIMEZONE}
      LOG_CONFS: true #optional
    volumes:
      - /opt/docker/wireguard/config:/config
      - /lib/modules:/lib/modules #optional
    ports:
      - "51820:51820"
      - "46886:46886/tcp"
      - "46886:46886/udp"
      - "8086:8086"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/wireguard-client
        awslogs-create-group: "true"
    restart: unless-stopped

#  cloudflare-ddns:
#    image: oznu/cloudflare-ddns
#    container_name: cloudflare-ddns
#    environment:
#      TZ: ${TIMEZONE}
#      PROXIED: 'true'
#      API_KEY: ${CLOUDFLARE_APIKEY}
#      ZONE: ${CLOUDFLARE_DOMAIN}
#      SUBDOMAIN: ${CLOUDFLARE_SUBDOMAIN}
#    labels:
#      - "org.hotio.pullio.notify=true"
#      - "org.hotio.pullio.update=true"
#      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
#    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none
      TZ: ${TIMEZONE}
      HOST: 127.0.0.1
    ports:
      - "8191:8191"
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/flaresolverr
        awslogs-create-group: "true"
    restart: unless-stopped

  rclone-serve-webdav:
    image: rclone/rclone
    container_name: rclone-serve-webdav
    volumes:
      - /root/.config/rclone/:/root/.config/rclone/:ro
      - /opt/docker/rclone-serve-webdav:/opt
      - /gmediac:/gmediac:ro
      - /server-storage/torrents/MAM/:/server-storage/torrents/MAM/
    command:
      - "serve"
      - "webdav"
      - "/gmediac"
      - "--config"
      - "/root/.config/rclone/rclone.conf"
      - "--verbose"
      - "--buffer-size"
      - "64M"
      - "--no-modtime"
      - "--vfs-read-chunk-size"
      - "64M"
      - "--vfs-read-chunk-size-limit"
      - "1024M"
      - "--dir-cache-time"
      - "5m"
      - "--umask"
      - "002"
      - "--addr"
      - "0.0.0.0:8087"
      - "--read-only"
      - "--copy-links"
      - "--include-from"
      - "/opt/include-from.txt"
      - "--template"
      - "/opt/index.html"
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/rclone-serve-webdav
        awslogs-create-group: "true"
    restart: unless-stopped

  speedtest:
    image: lscr.io/linuxserver/librespeed:latest
    container_name: speedtest
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      TZ: ${TIMEZONE}
      PASSWORD: ${LIBRESPEED_PASSWORD}
    volumes:
      - /opt/docker/librespeed/config:/config
    ports:
      - "8130:80"
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    logging:
      driver: awslogs
      options:
        awslogs-region: ${AWS_DEFAULT_REGION}
        awslogs-group: /${DEFAULT_BASE_MACHINE}/librespeed
        awslogs-create-group: "true"
    restart: unless-stopped