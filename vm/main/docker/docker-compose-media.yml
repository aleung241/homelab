version: '3.9'
services:
  radarr:
    image: hotio/radarr
    container_name: radarr
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      UMASK: ${DEFAULT_UMASK}
      TZ: ${TIMEZONE}
    volumes:
      - /opt/docker/radarr:/config
      - /gmediac:/datac
      - /server-storage:/server-storage
    ports:
      - 7878:7878
    env_file:
      - .env
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

  sonarr:
    image: hotio/sonarr
    container_name: sonarr
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      UMASK: ${DEFAULT_UMASK}
      TZ: ${TIMEZONE}
    volumes:
      - /opt/docker/sonarr:/config
      - /gmediac:/datac
      - /server-storage:/server-storage
    ports:
      - 8989:8989
    env_file:
      - .env
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

  jackett:
    image: hotio/jackett
    container_name: jackett
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      UMASK: ${DEFAULT_UMASK}
      TZ: ${TIMEZONE}
    volumes:
      - /opt/docker/jackett:/config
    ports:
      - 9117:9117
    env_file:
      - .env
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

  nzbhydra2:
    image: hotio/nzbhydra2
    container_name: nzbhydra2
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      TZ: ${TIMEZONE}
    volumes:
      - /opt/docker/nzbhydra2:/config
    ports:
      - 5076:5076
    env_file:
      - .env
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

  sabnzbd:
    image: hotio/sabnzbd
    container_name: sabnzbd
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      UMASK: ${DEFAULT_UMASK}
      TZ: ${TIMEZONE}
    volumes:
      - /opt/docker/sabnzbd:/config
      - /nvme/sabnzbd:/downloads
      - /server-storage:/data
    ports:
      - 8090:8080
    env_file:
      - .env
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

  bazarr:
    container_name: bazarr
    image: hotio/bazarr
    environment:
      PUID: ${DEFAULT_USER}
      PGID: ${DEFAULT_GROUP}
      UMASK: ${DEFAULT_UMASK}
      TZ: ${TIMEZONE}
    volumes:
      - /opt/docker/bazarr:/config
      - /server-storage:/server-storage
      - /gmedia:/data
      - /gmediac:/datac
    ports:
      - "6767:6767"
    env_file:
      - .env
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

  overseerr:
    image: sctx/overseerr
    container_name: overseerr
    environment:
      TZ: ${TIMEZONE}
      LOG_LEVEL: info
    volumes:
      - /opt/docker/overseerr:/app/config
    ports:
      - 5055:5055
    labels:
      - "org.hotio.pullio.notify=true"
      - "org.hotio.pullio.update=true"
      - "org.hotio.pullio.discord.webhook=${PULLIO_DISCORD_WEBHOOK}"
    restart: unless-stopped

#  invidious:
#    image: quay.io/invidious/invidious:latest
#    container_name: indivious
#    restart: unless-stopped
#    ports:
#      - "3100:3000"
#    environment:
#      # Please read the following file for a comprehensive list of all available
#      # configuration options and their associated syntax:
#      # https://github.com/iv-org/invidious/blob/master/config/config.example.yml
#      INVIDIOUS_CONFIG: |
#        db:
#          dbname: invidious
#          user: kemal
#          password: kemal
#          host: invidious-db
#          port: 5432
#        check_tables: true
#        # external_port:
#        # domain:
#        # https_only: false
#        # statistics_enabled: false
#    logging:
#      options:
#        max-size: "1G"
#        max-file: "4"
#    depends_on:
#      - invidious-db
#
#  invidious-db:
#    image: docker.io/library/postgres:14
#    container_name: indivious-db
#    restart: unless-stopped
#    volumes:
#      - /opt/docker/invidious/postgresdata:/var/lib/postgresql/data
#      - /opt/docker/invidious/config/sql:/config/sql
#      - /opt/docker/invidious/docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
#    environment:
#      POSTGRES_DB: invidious
#      POSTGRES_USER: kemal
#      POSTGRES_PASSWORD: kemal
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]